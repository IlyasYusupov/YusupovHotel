@page "/rooms"

<PageTitle>Room</PageTitle>
@inject IConfiguration config
@inject NavigationManager manager
@inject SingletonServise servise
@inject IWebHostEnvironment Environment

<section>
    <div class="modal fade" id="modalRegisterForm" data-bs-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
     aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header text-center">
                <h4 class="modal-title w-100 font-weight-bold">Добавление нового номера</h4>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick=Clear>
                </button>
            </div>
             <EditForm Model="@roomModel" class="formRegistr" OnValidSubmit="@Submit">
        <DataAnnotationsValidator />
        <div class="modal-body mx-3">
                <div class="md-form mb-5">
                        <iconify-icon icon="tabler:number"></iconify-icon>
                    <div id="inputBox">
                        <InputNumber TValue="int?" class="fas fa-envelope prefix grey-text" required="required" @bind-Value="roomModel.Number" onkeyup="this.value = this.value.replace(/[^0-9]/ig, '')" />
                        <span id="span">Номер комнаты</span>
                        <span style="margin-top: -4px"><ValidationMessage For="() => roomModel.Number" /></span>
                    </div>
                </div>
                <div class="md-form mb-5">
                        <iconify-icon icon="icon-park-twotone:hotel-please-clean"></iconify-icon>
                        <div class="typeList" >
                        <InputSelect @bind-Value="@roomModel.Type" required="required"
                            class="dropdown" style="outline:none; outline-style:none">
                            <option selected disabled></option>
                            <option value="Стандарт">Стандарт</option>
                            <option value="Бизнес">Бизнес</option>
                            <option value="Люкс одноместный">Люкс одноместный</option>
                            <option value="Люкс однокомнатный">Люкс двухкомнатный</option>
                            <option value="Люкс премиум">Люкс премиум</option>
                        </InputSelect>
                        <span id="span">Тип номера</span>
                        <span style="margin-top: -4px"><ValidationMessage For="() => roomModel.Type" /></span>
                    </div>
                </div>
                <div class="md-form mb-5">
                    <iconify-icon icon="pepicons-pop:persons"></iconify-icon>
                    <div id="inputBox">
                        <InputNumber TValue="int?" class="fas fa-envelope prefix grey-text" required="required" @bind-Value="roomModel.Capacity" onkeyup="this.value = this.value.replace(/[^0-9]/ig, '')" />
                        <span id="span">Вместимость</span>
                        <span style="margin-top: -4px"><ValidationMessage For="() => roomModel.Capacity" /></span>
                    </div>
                </div>
                <div class="md-form mb-5">
                        <iconify-icon icon="bx:area"></iconify-icon>
                    <div id="inputBox">
                        <InputNumber TValue="double?" class="fas fa-envelope prefix grey-text" required="required" prefix="" @bind-Value="roomModel.Area"  />
                        <span id="span">Площадь</span>
                        <span style="margin-top: -4px"><ValidationMessage For="() => roomModel.Area" /></span>
                    </div>
                </div>
                    <div class="md-form mb-5">
                        <iconify-icon icon="ic:twotone-price-check"></iconify-icon>
                        <div id="inputBox">
                            <InputNumber TValue="double?" class="fas fa-envelope prefix grey-text" required="required" prefix="" @bind-Value="roomModel.Cost" />
                            <span id="span">Цены за ночь</span>
                            <span style="margin-top: -4px"><ValidationMessage For="() => roomModel.Cost" /></span>
                        </div>
                    </div>
                    <div class="md-form mb-5">
                        <iconify-icon icon="mdi:text-box"></iconify-icon>
                        <div id="inputBox">
                            <div class="description">
                                <InputTextArea class="fas fa-envelope prefix grey-text" style="font-size: 14px;" type="text" @bind-Value="roomModel.Description" required="required" rows="4" />
                                <span id="span" style="margin-top: -105px; background-color: white">Описание</span>
                            </div>
                        </div>
                    </div>
                    <div class="md-form mb-5">
                        <iconify-icon icon="material-symbols:image-search-rounded" style="top:-14px"></iconify-icon>
                        <BlazorInputFile.InputFile OnChange="@LoadFiles" id="inputimage" class="form-control" multiple accept=".png,.jpg,.jpeg" />
                            @if (inputFileError != "")
                            {
                                <span style="margin-top: -4px; margin-left: 50px; color: red; font-size: 0.8em; text-transform: uppercase;">@inputFileError</span>
                            }
                            else if(imgSrc.Count == 3)
                            {
                                <div style="display:flex; align-content:center; padding: 10px;" >
                                    <img src="@imgSrc[0]" class="fit-picture" height="140" width="145" style="padding:10px"/>
                                    <img src="@imgSrc[1]" class="fit-picture" height="140" width="145" style="padding:10px" />
                                    <img src="@imgSrc[2]" class="fit-picture" height="140" width="145" style="padding:10px" />
                                </div>
                            }
                        
                    </div>
            </div>
            <div class="modal-footer d-flex justify-content-center">
                        <button class="btn btn-default btn-success" data-bs-dismiss="modal" type="submit">Добавить</button>
            </div>
                </EditForm>
        </div>
    </div>
</div>
    <div style="text-align: center; font-family: Georgia; font-size: 2em;">
        <span>Номера для проживания</span>
        <button id="buttonAdd" class="button" data-bs-toggle="modal" data-bs-target="#modalRegisterForm">
            <iconify-icon icon="material-symbols:add"></iconify-icon>
        </button>
    </div>
    <div class="grid" style="left:-100px; padding: 50px 50px 50px 50px;">
        @if(rooms.Count != 0)
        {
            @foreach(var room in rooms)
            {
            <div class="grid-item">
                <a href="room" @onclick="()=> OpenCurentRoom(room)">
                        <img src="@room.photosUrl[0]" alt="Snow">
                </a>
                <span style="font-size: 28px; top: 69%;">@room.Type</span>
                <span style="font-size: 18px; top: 78%;">Цена: @room.Cost р</span>
                <button class="btn">Забронировать</button>
            </div>
            }
        }
    </div>
</section>


@code
{
    List<Room> rooms = new List<Room>();
    Room roomModel = new Room();
    bool wasSubmitted;
    List<string> imgSrc = new List<string>();
    IFileListEntry file = null;
    List<byte[]> fileBytes = new List<byte[]>();
    string inputFileError = "";

    protected override async void OnInitialized()
    {
        rooms = Mongo.GetAllRooms();
        foreach (var room in rooms)
        {
            FileSystemService.GetRoomWithPhotos(room);
        }
    }

    private void AddNewRoom()
    {
        rooms.Add(FileSystemService.SaveRoomWithPhotos(fileBytes, roomModel));
        Clear();
    }

    public void Submit()
    {
        wasSubmitted = true;
        AddNewRoom();
    }


    private void OpenCurentRoom(Room room)
    {
        servise.room = room;
    }

    private async Task LoadFiles(IFileListEntry[] files)
    {
        imgSrc.Clear();
        fileBytes.Clear();
        if (files.Count() == 3)
        {
            inputFileError = "";
            for (int i = 0; i < files.Count(); i++)
            {
                file = files[i];
                using (var stream = new MemoryStream())
                {
                    await file.Data.CopyToAsync(stream);
                    fileBytes.Add(stream.ToArray());
                    var images = FileSystemService.GetImages(Convert.ToBase64String(fileBytes[i]));
                    imgSrc.Add(string.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(images)));
                }
            }
        }
        else if (files.Count() > 3) inputFileError = "Можно загрузить только 3 фото";
        else inputFileError = "Нужно загрузить 3 фото";

    }

    private void Clear()
    {
        roomModel = new Room();
        imgSrc.Clear();
    }
}

<style>

    .typeList, .description {
        position: relative;
        margin-top: -33px;
    }
    
    .description textarea{
        background: transparent;
        border-color: #ced4da;
        width: 400px;
        margin-left: 2.6rem;
        padding: 10px;
        height: 100px;
        min-height: 100px;
        max-height: 100px;
        outline: none;
    }

    .typeList select{
        background: transparent;
        outline: none;
        font-size: 16px;
        border: 0;
        border-radius: 0px;
        border-bottom: 1px solid #ced4da;
        height: 35px;
        width: 400px;
        margin-left: 2.6rem;
    }
     

    body {
        background-color: #eeeeee
    }

    .grid{
        width: 1070px;
        margin: 0 auto;
        padding: 30px 20px 25px 20px;
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(295px, 1fr));
        grid-auto-rows: 425px;
        grid-auto-flow: dense;
        grid-gap: 40px;
    }


    .grid .grid-item {
        max-width:295px;
        max-height: 425px;
        position: relative;
        background-color: #efefef;
        overflow: hidden;
        border-radius: 10px 10px 10px 10px;
    }

    .grid .grid-item img {
        width: 100%;
        height: 95%;
        object-fit: cover;
        transition: transform 0.5s cubic-bezier(0.165, 0.84, 0.44, 1);
        border-radius: 10px;
    }

    .grid .grid-item span {
        color: white;
        position: absolute;
        left: 12%;
        top: 70%;
        font-family: Georgia;
    }

    .grid .grid-item .btn {
        font-family: Georgia;
        position: absolute;
        top: 94%;
        left: 51%;
        transform: translate(-50%, -50%);
        -ms-transform: translate(-50%, -50%);
        background: transparent;
        background-color: #363635;
        color: white;
        font-size: 16px;
        padding: 12px 38px 12px 38px;
        border: none;
        cursor: pointer;
        border-radius: 1px 25px 25px 25px;
    }

    .grid .grid-item img:hover{
        transform: scale(1.04) 
    }

    .grid .grid-item .btn:hover {
        background-color: #badbd5;
        color: #363635;
    }


    .button {
        position: relative;
        border: 1px solid rgba(255, 255, 255, 0.5);
        font-size: 16px;
        width:50px;
        height: 50px;
        color: #212529;
        background: transparent;
        text-shadow: 0 1px 1px rgb(0 0 0 / 20%);
        border-radius: 10px;
    }

    .button span,
    .button iconify-icon {
      z-index: 1;
    }

    .button:active {
      border-color: rgba(0, 0, 0, 0.1);
    }

    .button::before,
    .button::after {
        content: "";
        position: absolute;
        transition: all 0.3s;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1;
        border-radius: 10px;
    }

    .button::before {
        background: #badbd559;
    }

    #buttonAdd iconify-icon {
      color: #e8d427;
      font-size: 30px;
    }

    #buttonAdd::before,
    #buttonAdd:active::before {
        opacity: 0;
        transform: scale(1, 0.1);
    }

    #buttonAdd:hover::before {
     opacity: 1;
    transform: scale(1, 1);
    }

    #inputBox {
        position: relative;
        margin-top: -40px;
    }

    #span {
        margin-top: -30px;
    }

    #inputimage {
        position: relative;
        margin-top: -55px;
        outline: none;
        margin-left: 2.6rem;
        height: 37px;
        width: 400px;
    }

    #inputBox input {
        background-color: transparent;
        border: 0;
        border-bottom: 1px solid #ced4da;
        border-radius: 0;
        outline: none;
        color: black;
        font-size: 14px;
        margin-left: 2.6rem;
        height: 37px;
        width: 400px;
    }

    #inputBox span, .typeList span, .description span {
        position: absolute;
        left: 45px;
        padding: 4px;
        pointer-events: none;
        font-size: 0.8em;
        color: gray;
        text-transform: uppercase;
        transition: 0.5s;
    }

    .description textarea:active,
    .typeList select:active {
        border-color: #ced4da;
        outline: none;
    }

    .description textarea:valid ~ #span,
    .description textarea:focus ~ #span,
    .typeList select:valid ~ #span,
    .typeList select:focus ~ #span,
    #inputBox input:valid ~ #span,
    #inputBox input:focus ~ #span {
        color: grey;
        transform: translateX(-1px) translateY(-15px);
        font-size: 0.6em;
        background: none;
        letter-spacing: 0.2em;
    }

    .md-form .prefix ~ input, select, textarea {
        width: calc(100% - 2rem);
        margin-left: 2.5rem;
    }

    .md-form iconify-icon {
        position: relative;
        transition: color .2s;
        font-size: 2.1rem;
        top: 5px;
    }

    .sr-only {
   position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

.input-label {
  padding : 20px;
  background-color : #f55442;
  color: white;
  border-radius: 10px;
  cursor : pointer;   
}

</style>