@page "/booking"

@inject NavigationManager manager
@inject SingletonServise servise
@inject IJSRuntime js

<div>
    <div>
        <div style="text-align: center; font-family: Georgia; font-size: 2em;">
            <span>Бронь</span>
        </div>
    </div>
</div>
<div class="row" style="margin: 2% 25% 5% 25%">
        <div class="col-lg-8" style="width: 800px">
            <div class="card mb-4">
                <div class="card-body">
                <EditForm Model="@bookingModel" class="formRegistr" OnValidSubmit="@Submit">
        <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col-sm-5">
                        <p class="mb-0">Клиент</p>
                        </div>
                        <div class="col-sm-7">
                            <input class="bookingInput" type="text" @bind="nameClient" disabled="@editing" @bind:event="oninput" @onfocus="OpenClientList" @onkeyup="@(() => Searcher("client"))">
                            <div class="dropdownClients" style="display:@clientsSearch;">
                                @foreach (var client in sortingClients)
                                {
                                    <a @onclick="() => SelectCleint(client)">@client.ClientName</a>
                                }
                            </div>
                        </div>
                    </div>
                    <hr>
                    <div class="row">
                        <div class="col-sm-5">
                            <p class="mb-0">Количество взрослых</p>
                        </div>
                        <div class="col-sm-7">
                            <InputText @bind-Value="adaltCount" @onfocusout="@(() => Sorter("clientCount"))" disabled="@editing" onkeyup="this.value = this.value.replace(/[^0-9]/ig, '')" />
                        </div>
                    </div>
                    <hr>
                    <div class="row">
                    <div class="col-sm-5">
                        <p class="mb-0">Количество детей</p>
                    </div>
                    <div class="col-sm-7">
                            <InputText @bind-Value="childCount" @onfocusout="@(() => Sorter("clientCount"))" disabled="@editing" onkeyup="this.value = this.value.replace(/[^0-9]/ig, '')" />
                </div>
                </div>
                <hr>
                <div class="row">
                    <div class="col-sm-5">
                        <p class="mb-0">Тип номера</p>
                    </div>
                    <div class="col-sm-7">
                            <InputSelect @bind-Value="roomType"  @onclick="@(() => Sorter("roomType"))" required="required" disabled="@editing"
                                         class="dropdown" style="outline:none; outline-style:none;font-size: 16px;border: 0;border-radius: 0px;height: 35px;width: 100%;">
                                <option selected disabled></option>
                                <option value="Стандарт">Стандарт</option>
                                <option value="Бизнес">Бизнес</option>
                                <option value="Люкс одноместный">Люкс одноместный</option>
                                <option value="Люкс однокомнатный">Люкс двухкомнатный</option>
                                <option value="Люкс премиум">Люкс премиум</option>
                            </InputSelect>
                                
                    </div>
                </div>
                <hr>
                <div class="row">
                    <div class="col-sm-5">
                        <p class="mb-0">Период проживания</p>
                    </div>
                    <div class="col-sm-7">
                            <DateRangePicker MinDate="DateTimeOffset.Now" @bind-StartDate="chekInDate" @bind-EndDate="chekOutDate" class="datePicker" required="required" disabled="@editing">  </DateRangePicker>
                    </div>
                </div>
        <hr>
        <div class="row">
            <div class="col-sm-5">
                <p class="mb-0">Номер</p>
            </div>
            <div class="col-sm-7">
                            <InputSelect TValue="int" @bind-Value="roomNumber"  @onmouseout="@TotalPriceCalculate" required="required" disabled="@editing"
                                         class="dropdown" style="outline:none; outline-style:none;font-size: 16px;border: 0;border-radius: 0px;height: 35px;width: 100%;">
                                
                        @if (sortingRooms != null)
                        {
                            @foreach (var room in sortingRooms)
                            {
                                <option value="@room.Number">@room.Number</option>
                            }
                        }
                    </InputSelect>
            </div>
        </div>
        <hr>
        <div class="row">
            <div class="col-sm-5">
                <p class="mb-0">Итоговая сумма проживания</p>
            </div>
            <div class="col-sm-7">
                    <InputNumber display class="bookingInput" @bind-Value="bookingModel.TotalPrice" disabled> </InputNumber>
            </div>
        </div>
            <hr>
            <div class="d-flex justify-content-end"  id="btnProfil">
                        <button type="button" style="margin-right: 1%;" hidden="@editing"
                                class="btn btn-danger" @onclick="CancelСhanges">
                            Отменить
                        </button>
                <button type="submit"
                                class="btn btn-success">
                    @btnText
                </button>
                </div>
                </EditForm>
            </div>
        </div>

        </div>
    </div>

@functions {
    Booking? bookingModel;
    Booking? booking;
    Client? client;
    List<Booking> bookings = new List<Booking>();
    List<Booking> sortingBookings = new List<Booking>();
    List<Room> rooms = new List<Room>();
    List<Room> sortingRooms = new List<Room>();
    List<Client> clients = new List<Client>();
    List<Client> sortingClients = new List<Client>();
    bool isRoomTypeSortON = true;
    bool isClientCountSortON = true;
    string nameClient = "";
    string adaltCount = "";
    string childCount = "";
    bool wasSubmitted;
    bool editing = true;
    string btnText = "Изменить";
    string clientsSearch = "none";
    string roomType = "";
    int roomNumber;
    DateTimeOffset? chekInDate;
    DateTimeOffset? chekOutDate;

    protected override async void OnInitialized()
    {
        booking = Mongo.FindBooking(servise.booking.Client);
        chekInDate = GetDate(booking.ArrivalDate.ToString("dd,MM,yyyy")).ToDateTime(TimeOnly.MinValue);
        chekOutDate = GetDate(booking.DepartureDate.ToString("dd,MM,yyyy")).ToDateTime(TimeOnly.MinValue);
        bookingModel = servise.booking;
        roomNumber = (int)bookingModel.Room.Number;
        clients = Mongo.FindAllClient();
        sortingClients = clients;
        rooms = SorterClass.GetRoomWithoutBooking(Mongo.GetAllRooms(), bookings);
        sortingRooms = rooms;
        nameClient = booking.Client.ClientName;
        adaltCount = booking.AdaltCount.ToString();
        childCount = booking.ChildCount.ToString();
        roomType = booking.Room.Type;
        Sorter("roomType");
    }

    private DateOnly GetDate(string date)
    {
        int day = int.Parse(date.Split('.', ',')[0]);
        int mounth = int.Parse(date.Split('.', ',')[1]);
        int year = int.Parse(date.Split('.', ',')[2]);
        return new DateOnly(year, mounth, day);
    }
    
    private void TotalPriceCalculate()
    {
        if (roomNumber != 0)
        {
            var arrivalDate = (GetDate(chekInDate.ToString().Split(" ")[0])).ToDateTime(TimeOnly.MinValue);
            var departureDate = (GetDate(chekOutDate.ToString().Split(" ")[0])).ToDateTime(TimeOnly.MinValue);
            var room = Mongo.GetRoom(roomNumber);
            bookingModel.TotalPrice = (double)room.Cost * ((int)(departureDate - arrivalDate).TotalDays);
            
        }
    }
    

    public void Editing()
    {
        switch (btnText)
        {
            case "Изменить":
                editing = false;

                btnText = "Сохранить";
                break;
            case "Сохранить":
                editing = true;
                btnText = "Изменить";
                var newBooking = new Booking();
                Mongo.ReplaceBooking(bookingModel.Client, booking);
                break;
        }
        roomNumber = new int();
    }

    private void OpenClientList()
    {
        clientsSearch = "block";
    }

    public void SelectCleint(Client selectedClient)
    {
        clientsSearch = "none";
        nameClient = selectedClient.ClientName;
        client = selectedClient;
    }

    private void Sorter(string sorting)
    {
        switch (sorting)
        {
            case "roomType":
                if (!isClientCountSortON) sortingRooms = SorterClass.GetRoomWithSelectType(rooms, ref isRoomTypeSortON, roomType);
                else if (isClientCountSortON)
                {
                    sortingRooms = SorterClass.GetRoomWithSelectType(rooms, ref isRoomTypeSortON, roomType);
                    sortingRooms = SorterClass.GetRoomForPeopleCount(sortingRooms, ref isClientCountSortON, adaltCount, childCount);
                }
                break;

            case "clientCount":
                if (!isRoomTypeSortON) sortingRooms = SorterClass.GetRoomForPeopleCount(rooms, ref isClientCountSortON, adaltCount, childCount);
                else if (isRoomTypeSortON)
                {
                    sortingRooms = SorterClass.GetRoomForPeopleCount(rooms, ref isClientCountSortON, adaltCount, childCount);
                    sortingRooms = SorterClass.GetRoomWithSelectType(sortingRooms, ref isRoomTypeSortON, roomType);
                }
                break;
        }
    }

    private void Searcher(string search)
    {
        switch (search)
        {
            case "client":
                sortingClients = SearcherClass.SearchingClientForSelect(clients, nameClient);
                break;
        }
    }

    private async void CancelСhanges()
    {
        editing = true;
        btnText = "Изменить";
        bookingModel = booking;
        nameClient = booking.Client.ClientName;
        roomNumber = (int)booking.Room.Number;
        roomType = booking.Room.Type;
        chekInDate = GetDate(booking.ArrivalDate.ToString("dd,MM,yyyy")).ToDateTime(TimeOnly.MinValue);
        chekOutDate = GetDate(booking.DepartureDate.ToString("dd,MM,yyyy")).ToDateTime(TimeOnly.MinValue);
    }

    public void Submit()
    {
        wasSubmitted = true;
        Editing();
    }
}

<style>

    body {
        background-color: #eeeeee
    }

    .vh-100 {
        height: 96vh !important;
    }
    
    input {
        width: 98%;
        outline: none!important;
        border: 0;
        border-bottom: 0.1px solid white;
        height: 37px;
        font-size: 16px;
        margin-top: -2%;
    }

.section {
    position: relative;
    height: 100vh;
}

.section .section-center {
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    -webkit-transform: translateY(-50%);
    transform: translateY(-50%);
}

    .dropdownClients {
        overflow-y: scroll;
        overflow-x: hidden;
        margin-left: 0.3%;
        width: 100%;
        min-height: 30px;
        max-height: 100px;
    }

        .dropdownClients a {
            cursor: pointer;
            width: 100%;
            display: block;
        }

        .inputBoxClients input:valid ~ .dropdownClients,
        .inputBoxClients input:focus ~ .dropdownClients,
        .dropdownClients a:focus ~ .dropdownClients {
            display: block;
        }
</style>