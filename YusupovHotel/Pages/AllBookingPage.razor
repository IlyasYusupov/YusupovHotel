@page "/bookings"

@inject IJSRuntime js
@inject NavigationManager manager
@inject SingletonServise servise

<section> 
    <div class="modal fade" id="modalRegisterForm" data-bs-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
         aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header text-center">
                    <h4 class="modal-title w-100 font-weight-bold">Бронирование номера</h4>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="ClaerBookingForm">
                    </button>
                </div>
                <EditForm Model="@bookModel" class="formRegistr" OnValidSubmit="@Submit">
                    <DataAnnotationsValidator />
                    <div class="modal-body mx-3">
                    <div class="md-form mb-5">
                        <iconify-icon icon="material-symbols:person"></iconify-icon>
                        <div id="inputBox" class="inputBoxClients">
                            <input class="fas fa-envelope prefix grey-text" type="text" @bind="nameClient" @bind:event="oninput"  @onfocus="OpenClientList" @onkeyup="@(() => Searcher("client"))" required="required">
                            <span id="span">Клиент</span>
                                <div class="dropdownClients" style="display:@clientsSearch;">
                                @foreach (var client in sortingClients)
                                {
                                    <a @onclick="() => SelectCleint(client)">@client.ClientName</a>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="md-form mb-5">
                        <iconify-icon icon="pepicons-pop:persons"></iconify-icon>
                        <div id="inputBox">
                                <InputText @bind-Value="adaltCount" class="fas fa-envelope prefix grey-text" required="required" @onfocusout="@(() => Sorter("clientCount"))" onkeyup="this.value = this.value.replace(/[^0-9]/ig, '')" />
                            <span id="span">Кол-во взрослых</span>
                        </div>
                    </div>
                    <div class="md-form mb-5">
                        <iconify-icon icon="pepicons-pop:persons" ></iconify-icon>
                        <div id="inputBox">
                                <InputText @bind-Value="childCount" class="fas fa-envelope prefix grey-text" @onfocusout="@(() => Sorter("clientCount"))" required="required" onkeyup="this.value = this.value.replace(/[^0-9]/ig, '')" />
                            <span id="span">Кол-во детей</span>
                        </div>
                    </div>
                        <div class="md-form mb-5">
                        <iconify-icon icon="icon-park-twotone:hotel-please-clean" style="top: 7px;"></iconify-icon>
                            <div class="typeList" >
                            <InputSelect @bind-Value="roomType" @onclick="@(() => Sorter("roomType"))" required="required"
                                class="dropdown" style="outline:none; outline-style:none">
                                <option selected disabled></option>
                                <option value="Стандарт">Стандарт</option>
                                <option value="Стандарт плюс">Стандарт плюс</option>
                                <option value="Бизнес">Бизнес</option>
                                <option value="Люкс">Люкс</option>
                                <option value="Люкс премиум">Люкс премиум</option>
                                </InputSelect>
                                <span id="span">Тип номера</span>
                            </div>
                        </div>
                    <div class="md-form mb-5">
                        <iconify-icon icon="ic:baseline-calendar-month"></iconify-icon>
                            <div id="inputBox">
                                <DateRangePicker MinDate="DateTimeOffset.Now" @bind-StartDate="chekInDate" @bind-EndDate="chekOutDate" class="datePicker" required="required">  </DateRangePicker>
                                <span id="span">Период проживания</span>
                            </div>
                    </div>
                    <div class="md-form mb-5">
                        <iconify-icon icon="tabler:number" style="top:9px"></iconify-icon>
                            <div class="typeList" >
                            <InputSelect @bind-Value="roomNumber" required="required"
                                class="dropdown" style="outline:none; outline-style:none">
                                <option selected disabled></option>
                                    @if(sortingRooms != null)
                                    {
                                        @foreach (var room in sortingRooms)
                                        {
                                            <option value="@room.RoomNumber.ToString()">@room.RoomNumber</option>
                                        }
                                    }
                                </InputSelect>
                                <span id="span">Номер</span>
                            </div>
                        </div>

                    </div>
                    <div class="modal-footer d-flex justify-content-center">
                    <button class="btn btn-default btn-success" type="submit"  >Добавить</button>
                    </div>
                    </EditForm>
            </div>
        </div>
        </div>
    <div class="appbar" style="margin: 20px 0 0 10%">
        <input id="searching" class="sort" type="text" @bind="searchBookByClientName" @bind:event="oninput" @onkeyup="@(() => Searcher("booking"))" required="required" placeholder="Поиск">
        <i id="searching" class="fas fa-search prefix grey-text"></i>
        <button id="newBook" class="btn btn-default btn-success" type="submit" data-bs-dismiss="modal" data-bs-toggle="modal" data-bs-target="#modalRegisterForm">
            Забронировать
        </button>
    </div>
    <table class="table" style="width: 80%; margin: 40px 10%;">
        <thead>
            <tr>
                <th>Номер комнаты</th>
                <th>Клиент</th>
                <th>Дата заезда</th>
                <th>Дата выезда</th>
                <th>Сумма проживания, р</th>
                <th>Изменить</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in sortingBookings)
            {
                @if (book.DepartureDate < GetDate(DateTime.Now.Date.ToString("dd,MM,yyyy")))
                {
                    <tr style="background-color: lightgray">
                        <td>@book.Room.RoomNumber</td>
                        <td>@book.Client.ClientName</td>
                        <td>@book.ArrivalDate</td>
                        <td>@book.DepartureDate</td>
                        <td>@book.TotalPrice</td>
                        <td>
                            <button class="button1" style="vertical-align:middle; background-color:#6c757d; font-size: 15px;" @onclick="() => OpenPastBooking(book)"><span>Подробнее </span></button>
                        </td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td>@book.Room.RoomNumber</td>
                        <td>@book.Client.ClientName</td>
                        <td>@book.ArrivalDate</td>
                        <td>@book.DepartureDate</td>
                        <td>@book.TotalPrice</td>
                        <td>
                            <button class="button" style="vertical-align:middle" @onclick="() => OpenCurrentBooking(book)"><span>Изменить </span></button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</section>

@code {
    List<Booking> bookings = new List<Booking>();
    List<Booking> sortingBookings = new List<Booking>();
    List<Rooms> rooms = new List<Rooms>();
    List<Rooms> sortingRooms = new List<Rooms>();
    List<Client> clients = new List<Client>();
    List<Client> sortingClients = new List<Client>();
    Booking bookModel = new Booking();
    bool isRoomTypeSortON;
    bool isClientCountSortON;
    string clientsSearch = "none";
    string searchBookByClientName = "";
    string nameClient = "";
    DateTimeOffset? chekInDate;
    DateTimeOffset? chekOutDate;
    Client? client;
    string adaltCount = "";
    string childCount = "";
    string roomNumber = "";
    string roomType = "";
    bool wasSubmitted;


    protected override void OnInitialized()
    {
        js.InvokeVoidAsync("ChangePanelsState");
        bookings = Mongo.FindAllBooking();
        sortingBookings = bookings;
        clients = Mongo.FindAllClient();
        sortingClients = clients;
        rooms = SorterClass.GetRoomWithoutBooking(Mongo.GetAllRoom(), bookings);
        sortingRooms = rooms;
    }

    public void Submit()
    {
        wasSubmitted = true;
        AddNewBook();
        js.InvokeVoidAsync("CloseModal");
    }
    private void AddNewBook()
    {
        var room = Mongo.GetRoom(int.Parse(roomNumber));
        var arrivalDate = GetDate(chekInDate.ToString().Split(" ")[0]);
        var departureDate = GetDate(chekOutDate.ToString().Split(" ")[0]);
        var totalPrice = TotalPriceCalculate(arrivalDate.ToDateTime(TimeOnly.MinValue), departureDate.ToDateTime(TimeOnly.MinValue), (double)(Mongo.GetRoomType(room.RoomType).Cost));
        var newBook = new Booking(room, client, int.Parse(adaltCount), int.Parse(childCount), arrivalDate, departureDate, totalPrice);
        Mongo.AddBookingToDB(newBook);
        bookings.Insert(0, newBook);
        ClaerBookingForm();
        sortingBookings = SearcherClass.BookingSearch(bookings, searchBookByClientName);
    }

    private double TotalPriceCalculate(DateTime arrivalDate, DateTime departureDate, double roomCost)
    {
        var totalPrice = roomCost * ((int)(departureDate - arrivalDate).TotalDays);
        return totalPrice;
    }

    private DateOnly GetDate(string date)
    {
        int day = int.Parse(date.Split('.',',')[0]);
        int mounth = int.Parse(date.Split('.', ',')[1]);
        int year = int.Parse(date.Split('.', ',')[2]);
        return new DateOnly(year, mounth, day);
    }

    private void OpenPastBooking(Booking booking)
    {
        servise.booking = Mongo.FindBooking(booking.Client, GetDate(chekInDate.ToString().Split(" ")[0]), GetDate(chekOutDate.ToString().Split(" ")[0]));
        manager.NavigateTo("bookingForCheck");
    }

    private void OpenCurrentBooking(Booking booking)
    {
        servise.booking = booking;
        manager.NavigateTo("booking");
    }

    private void OpenClientList()
    {
        clientsSearch = "block";
    }

    public void SelectCleint(Client selectedClient)
    {
        clientsSearch = "none";
        nameClient = selectedClient.ClientName;
        client = selectedClient;
    }

    private void Sorter(string sorting)
    {
        switch (sorting)
        {
            case "roomType":
                if (!isClientCountSortON) sortingRooms = SorterClass.GetRoomWithSelectType(rooms, ref isRoomTypeSortON, roomType);
                else if (isClientCountSortON)
                {
                    sortingRooms = SorterClass.GetRoomWithSelectType(rooms, ref isRoomTypeSortON, roomType);
                    sortingRooms = SorterClass.GetRoomForPeopleCount(sortingRooms, ref isClientCountSortON, adaltCount, childCount);
                }
                break;

            case "clientCount":
                if (!isRoomTypeSortON) sortingRooms = SorterClass.GetRoomForPeopleCount(rooms, ref isClientCountSortON, adaltCount, childCount);
                else if (isRoomTypeSortON)
                {
                    sortingRooms = SorterClass.GetRoomForPeopleCount(rooms, ref isClientCountSortON, adaltCount, childCount);
                    sortingRooms = SorterClass.GetRoomWithSelectType(sortingRooms, ref isRoomTypeSortON, roomType);
                }
                break;
        }
    }

    private void Searcher(string search)
    {
        switch (search)
        {
            case "booking":
                sortingBookings = SearcherClass.BookingSearch(bookings, searchBookByClientName);
                break;

            case "client":
                sortingClients = SearcherClass.SearchingClientForSelect(clients, nameClient);
                break;
        }
    }


    private void ClaerBookingForm()
    {
        nameClient = string.Empty;
        adaltCount = string.Empty;
        childCount = string.Empty; 
        roomType = string.Empty;
        chekInDate = null;
        chekOutDate = null;
        roomNumber = string.Empty;
        isClientCountSortON = false;
        isRoomTypeSortON = false;
        clientsSearch = "none";
    }
}

<style>
    body {
        background-color: #eeeeee
    }

    .appbar {
        margin-bottom: 20px;
    }

    #newBook {
        margin-left: 250px;
        margin-top: -1px;
    }

    #searching {
        width: 250px;
        height: 35px;
        padding-left: 24px;
    }


        #searching ~ i {
            width: 35px;
            margin-left: -272px;
        }


    .dropdownClients{
        overflow-y:scroll; 
        overflow-x:hidden; 
        margin-left: 2.6rem;
        width: 400px; 
        min-height:30px; 
        max-height:100px;
    }

    .dropdownClients a{
        cursor: pointer;
        width: 400px;
        display: block;
    }

    .typeList {
        position: relative;
        margin-top: -33px;
    }
    .typeList select {

        background: transparent;
        outline: none;
        font-size: 16px;
        border: 0;
        border-radius: 0px;
        border-bottom: 1px solid #ced4da;
        height: 35px;
        width: 400px;
        margin-left: 2.6rem;
    }

    #span {
        margin-top: -30px;
    }

    #inputBox {
        position: relative;
        margin-top: -40px;
    }

        #inputBox input, .datePicker {
        background-color: transparent;
        border: 0;
        border-bottom: 1px solid #ced4da;
        border-radius: 0;
        outline: none;
        color: black;
        font-size: 14px;
        margin-left: 2.6rem;
        height: 30px;
        width: 400px;
    }

        #inputBox span, .typeList span {
        position: absolute;
        left: 45px;
        padding: 4px;
        pointer-events: none;
        font-size: 0.8em;
        color: gray;
        text-transform: uppercase;
        transition: 0.5s;
    }

    .typeList select:active {
        border-color: #ced4da;
        outline: none;
    }

    .datePicker:valid ~ #span,
    .datePicker:focus ~ #span,
    .typeList select:valid ~ #span,
    .typeList select:focus ~ #span,
    #inputBox input:valid ~ #span,
    #inputBox input:focus ~ #span {
        color: grey;
        transform: translateX(-1px) translateY(-15px);
        font-size: 0.6em;
        background: none;
        letter-spacing: 0.2em;
    }



    .inputBoxClients input:valid ~ .dropdownClients,
    .inputBoxClients input:focus ~ .dropdownClients,
    .dropdownClients a:focus ~ .dropdownClients {
        display: block;
    }



    .md-form .prefix ~ input, select, textarea {
        width: calc(100% - 2rem);
        margin-left: 2.5rem;
    }

    .md-form iconify-icon {
        position: relative;
        transition: color .2s;
        font-size: 2.1rem;
    }


    .button, .button1 {
        display: inline-block;
        border-radius: 4px;
        background-color: #0dcaf0;
        border: none;
        color: black;
        text-align: center;
        font-size: 16px;
        padding: 11px;
        width: 116px;
        transition: all 0.5s;
        cursor: pointer;
        margin: 5px;
    }

    .button span, .button1 span {
        cursor: pointer;
        display: inline-block;
        position: relative;
        transition: 0.5s;
    }

    .button span:after {
        content: '\00bb';
        position: absolute;
        opacity: 0;
        top: 0;
        right: -30px;
        transition: 0.5s;
    }

    .button:hover span {
        padding-right: 22px;
    }

    .button:hover span:after {
        opacity: 1;
        right: 0;
    }

    .button1 span:after {
        content: '\00bb';
        position: absolute;
        opacity: 0;
        top: 0;
        right: -30px;
        transition: 0.5s;
    }

    .button1:hover span {
        padding-right: 20px;
    }

    .button1:hover span:after {
        opacity: 1;
        right: 0;
    }

</style>
